// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?         
  lastname       String?         
  hashedPassword String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Room Room[] @relation("RoomOwner")

  Booking Booking[] @relation("Renter")

  Review Review[]

  TravelHistory TravelHistory[]

  Message Message[] @relation("SentMessages")

  ReceivedMessage Message[] @relation("ReceivedMessages")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Room {
  room_id       Int             @id @default(autoincrement())
  owner         User            @relation("RoomOwner", fields: [ownerId], references: [id])
  ownerId       String
  title         String
  description   String?
  location      String
  pricePerNight Decimal         @default(0.00)
  availableFrom DateTime?
  availableTo   DateTime?
  createdAt     DateTime        @default(now())
  bookings      Booking[]
  reviews       Review[]
  photos        RoomPhoto[]
  travelHistory TravelHistory[]
}

model Booking {
  booking_id    Int            @id @default(autoincrement())
  room          Room           @relation(fields: [roomId], references: [room_id])
  roomId        Int
  renter        User           @relation("Renter", fields: [renterId], references: [id])
  renterId      String
  startDate     DateTime
  endDate       DateTime
  totalPrice    Decimal        @default(0.00)
  createdAt     DateTime       @default(now())
  travelHistory TravelHistory?
}

model Review {
  review_id  Int      @id @default(autoincrement())
  room       Room     @relation(fields: [roomId], references: [room_id])
  roomId     Int
  reviewer   User     @relation(fields: [reviewerId], references: [id])
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

model RoomPhoto {
  photo_id   Int      @id @default(autoincrement())
  room       Room     @relation(fields: [roomId], references: [room_id])
  roomId     Int
  photoUrl   String
  uploadedAt DateTime @default(now())
}

model TravelHistory {
  history_id  Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  room        Room     @relation(fields: [roomId], references: [room_id])
  roomId      Int
  booking     Booking  @relation(fields: [bookingId], references: [booking_id])
  bookingId   Int      @unique
  startDate   DateTime
  endDate     DateTime
  totalPrice  Decimal  @default(0.00)
  ratingGiven Int?
  reviewGiven String?
  createdAt   DateTime @default(now())
}

model Message {
  message_id Int      @id @default(autoincrement())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)
}
